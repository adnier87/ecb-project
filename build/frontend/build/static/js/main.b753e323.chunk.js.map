{"version":3,"sources":["requester.tsx","assets/Car-Not-Found.png","components/vehicle-card/index.tsx","components/vehicle-listing/index.tsx","App.tsx","index.tsx"],"names":["getAllVehicles","a","axios","get","response","data","updateData","post","_id","person","estimateDate","date","useStyle","makeStyles","root","transform","VehicleCard","onClickCard","classes","useState","selected","setSelection","Card","className","onClick","CardActionArea","component","CardMedia","alt","make","model","title","image","height","onError","ev","target","src","notFound","CardContent","Grid","container","item","xs","Typography","variant","color","km","estimatedate","description","dialog","position","VehicleListing","vehicles","setVehicles","loading","setLoading","showLoader","setShowLoader","showVehicles","setShowVehicles","showAlert","setShowAlert","alertMessage","setAlertMessage","showForm","setShowForm","Date","setDate","setPerson","selectedVehicleId","setSelectedVehicleId","useEffect","then","error","setTimeout","console","log","catch","showVehicleForm","id","Fade","in","direction","justify","alignItems","CircularProgress","size","Container","spacing","length","map","vehicle","idx","Grow","style","transformOrigin","timeout","sm","md","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","TransitionComponent","Slide","Alert","onClose","severity","Dialog","DialogTitle","DialogContent","TextField","required","label","onChange","value","d","DialogActions","Button","day","getDate","month","getMonth","year","getFullYear","fullDate","JSON","stringify","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b753e323.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst getAllVehicles = async (): Promise<any> => {\r\n    try {\r\n        const response = await axios.get('/api/vehicles');\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nconst updateData = async (data: any): Promise<any> => {\r\n    try {\r\n        await axios.post(`/api/vehicle/${data._id}`, {\r\n            person: data.person,\r\n            estimateDate: data.date\r\n        })\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport {\r\n    getAllVehicles,\r\n    updateData,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Car-Not-Found.dac5f5e5.png\";","import { useState } from 'react';\r\nimport {\r\n    Card,\r\n    CardMedia,\r\n    CardContent,\r\n    Grid,\r\n    Typography,\r\n    CardActionArea,\r\n    makeStyles\r\n} from '@material-ui/core';\r\nimport notFound from '../../assets/Car-Not-Found.png';\r\n\r\nconst useStyle = makeStyles({\r\n    root: {\r\n        '&:hover': {\r\n            transform: 'scale(1.03)',\r\n        }\r\n    }\r\n})\r\n\r\nconst VehicleCard = ({ data, onClickCard }: any) => {\r\n    const classes = useStyle();\r\n\r\n    const [selected, setSelection] = useState(false);\r\n\r\n    return (\r\n            <Card\r\n                className={classes.root}\r\n                onClick={() => {\r\n                    onClickCard(data._id);\r\n                    setSelection(!selected)\r\n                }}\r\n            >\r\n                <CardActionArea className={selected ? 'selected' : ''} component='a'>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        alt={`${data.make} ${data.model}`}\r\n                        title={`${data.make} ${data.model}`}\r\n                        image={data.image}\r\n                        height=\"180\"\r\n                        onError={(ev: any) => {\r\n                            ev.target.src=notFound;\r\n                        }}\r\n                    />\r\n                    <CardContent>\r\n                        <Grid container>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textPrimary\">\r\n                                    <strong>Fabricante</strong>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\r\n                                    {data.make}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textPrimary\">\r\n                                    <strong>Modelo</strong>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\r\n                                    {data.model}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textPrimary\">\r\n                                    <strong>Kilometraje</strong>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\r\n                                    {data.km ? `${data.km}km` : '--'}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textPrimary\">\r\n                                    <strong>Fecha</strong>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\r\n                                    {data.estimatedate || '--'}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textPrimary\">\r\n                                    <strong>Descripción</strong>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                            >\r\n                                <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\r\n                                    {data.description || '--'}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default VehicleCard;","import { useState, useEffect } from 'react';\r\nimport { CircularProgress, Fade, Grid, Grow, Container, Typography, Snackbar, Slide, Modal, TextField, Dialog, DialogContent, DialogActions, Button, DialogTitle, makeStyles } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { getAllVehicles, updateData } from '../../requester';\r\nimport VehicleCard from '../vehicle-card';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst useStyle = makeStyles({\r\n    dialog: {\r\n        position: 'unset'\r\n    }\r\n})\r\n\r\nconst VehicleListing = () => {\r\n    const [vehicles, setVehicles] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [showLoader, setShowLoader] = useState(true);\r\n    const [showVehicles, setShowVehicles] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [alertMessage, setAlertMessage] = useState('');\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [date, setDate] = useState(new Date());\r\n    const [person, setPerson] = useState('');\r\n    const [selectedVehicleId, setSelectedVehicleId] = useState(0);\r\n\r\n    const classes = useStyle();\r\n\r\n    useEffect((): void => {\r\n        if (alertMessage && !showAlert) {\r\n            setShowAlert(true);\r\n        }\r\n    }, [alertMessage])\r\n\r\n    useEffect((): void => {\r\n        getAllVehicles()\r\n            .then((response) => {\r\n                if (response.error) throw response.error;\r\n                setVehicles(response);\r\n                setShowLoader(false);\r\n                setTimeout(() => {\r\n                    setLoading(false);\r\n                }, 5000);\r\n                setShowVehicles(true);\r\n\r\n                console.log('All vehicles were gotten');\r\n            })\r\n            .catch(error => {\r\n                console.error(`Error from VehicleListing trying to get vehicles::: ${error}`);\r\n            })\r\n    }, [])\r\n\r\n    const showVehicleForm = (id: number): void => {\r\n        setSelectedVehicleId(id);\r\n        setShowForm(true);\r\n    }\r\n\r\n    const sendData = (): void => {\r\n        const day = date.getDate()\r\n        const month = date.getMonth() + 1\r\n        const year = date.getFullYear()\r\n        let fullDate = '';\r\n\r\n        if (month < 10) {\r\n            fullDate = `${day}/0${month}/${year}`;\r\n        } else {\r\n            fullDate = `${day}/${month}/${year}`;\r\n        }\r\n\r\n        const data = {\r\n            _id: selectedVehicleId,\r\n            person,\r\n            date: fullDate,\r\n        }; console.log(`Sending data::: ${JSON.stringify(data)}`);\r\n\r\n        updateData(data);\r\n        setShowForm(false);\r\n        setTimeout(() => {\r\n            setPerson('');\r\n            setDate(new Date());\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {loading &&\r\n                <Fade in={showLoader}>\r\n                    <div className=\"loader\">\r\n                        <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <CircularProgress size='12rem' />\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n            }\r\n            <Container>\r\n                <Typography variant=\"h4\" component=\"h4\">\r\n                    Vehiculos en mantenimiento\r\n                </Typography>\r\n                <Grid container spacing={3}>\r\n                    {vehicles.length > 0 &&\r\n                        vehicles.map((vehicle, idx) => {\r\n                            return (\r\n                                <Grow\r\n                                    in={showVehicles}\r\n                                    style={{ transformOrigin: '0 0 0' }}\r\n                                    timeout={1000 * idx}\r\n                                >\r\n                                    <Grid\r\n                                        item\r\n                                        xs={12}\r\n                                        sm={6}\r\n                                        md={3}\r\n                                    >\r\n                                        <VehicleCard onClickCard={showVehicleForm} data={vehicle} />\r\n                                    </Grid>\r\n                                </Grow>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={showAlert}\r\n                autoHideDuration={4000}\r\n                TransitionComponent={Slide}\r\n            >\r\n                <Alert onClose={()=>{\r\n                    setShowAlert(false);\r\n                    setTimeout(() => {\r\n                        setAlertMessage('');\r\n                    }, 6000);\r\n                }} severity='success'>{alertMessage}</Alert>\r\n            </Snackbar>\r\n\r\n            <Dialog\r\n                open={showForm}\r\n                className=\"main-dialog\"\r\n            >\r\n                <DialogTitle>\r\n                    Ingreso de datos\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <TextField required id=\"person-input\" label=\"Persona\" onChange={(ev) => {\r\n                        setPerson(ev.target.value);\r\n                    }} />\r\n                    <DatePicker selected={date} onChange={(d: Date) => {\r\n                        setDate(d);\r\n                    }} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => {\r\n                        setShowForm(false);\r\n                        setPerson('');\r\n                        setDate(new Date);\r\n                    }} color=\"primary\">\r\n                        Cancelar\r\n                    </Button>\r\n                    <Button onClick={sendData} color=\"primary\">\r\n                        Enviar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VehicleListing;","import './App.css';\r\nimport VehicleListing from './components/vehicle-listing';\r\n\r\nfunction App() {\r\n  return (\r\n    <VehicleListing />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}